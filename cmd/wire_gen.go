// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"context"
	"qqlx/base/app"
	"qqlx/base/data"
	"qqlx/base/handler"
	"qqlx/base/middleware"
	"qqlx/base/server"
	"qqlx/base/validator"
	"qqlx/controller"
	"qqlx/pkg/sonyflake"
	"qqlx/router"
	"qqlx/service"
	"qqlx/store/cache"
	"qqlx/store/ldap"
	"qqlx/store/rbac"
	"qqlx/store/userstore"
)

// Injectors from wire.go:

func InitApplication(ctx context.Context) (*app.Application, func(), error) {
	client, err := data.CreateRDB(ctx)
	if err != nil {
		return nil, nil, err
	}
	store, cleanup, err := cache.NewStore(client)
	if err != nil {
		return nil, nil, err
	}
	generateIDStruct := sonyflake.NewGenerateID(ctx, store)
	db, cleanup2, err := data.InitMySQL()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userstoreStore := userstore.NewUserStore(db)
	userAssociationStore := userstore.NewUserAssociationStore(db)
	roleStore := rbac.NewRoleStore(db)
	enforcer, err := data.InitCasbin()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	casbinStore := rbac.NewCasbinStore(enforcer)
	conn, cleanup3, err := data.InitLdap()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	ldapStore, err := ldap.NewLdapStore(conn)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	userSVC, err := service.NewUserSVC(generateIDStruct, userstoreStore, userAssociationStore, roleStore, store, casbinStore, ldapStore)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	validatorValidator := validator.NewValidator()
	bindRequest := handler.NewResponse(validatorValidator)
	userCtrl := controller.NewUserCtrl(userSVC, bindRequest)
	policyStore := rbac.NewPolicyStore(db)
	roleAssociationStore := rbac.NewRoleAssociationStore(db)
	roleSVC := service.NewRoleSVC(generateIDStruct, roleStore, policyStore, roleAssociationStore, casbinStore, ldapStore)
	roleCtrl := controller.NewRoleCtrl(roleSVC, bindRequest)
	policySVC := service.NewPolicySVC(generateIDStruct, policyStore)
	policyCtrl := controller.NewPolicyCtrl(policySVC, bindRequest)
	apiRoute := router.NewApiRoute(userCtrl, roleCtrl, policyCtrl)
	authentication := rbac.NewAuthentication(enforcer)
	authorizationMiddleware := middleware.NewAuthorization(store, authentication, userstoreStore)
	engine := server.NewHttpServer(apiRoute, authorizationMiddleware)
	application := app.NewApplication(engine)
	return application, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
